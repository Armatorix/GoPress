// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /admin/content/{contentId})
	GetContent(ctx echo.Context, contentId ContentId) error

	// (GET /admin/contents)
	GetContents(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContent converts echo context to params.
func (w *ServerInterfaceWrapper) GetContent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contentId" -------------
	var contentId ContentId

	err = runtime.BindStyledParameterWithOptions("simple", "contentId", ctx.Param("contentId"), &contentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContent(ctx, contentId)
	return err
}

// GetContents converts echo context to params.
func (w *ServerInterfaceWrapper) GetContents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContents(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/admin/content/:contentId", wrapper.GetContent)
	router.GET(baseURL+"/admin/contents", wrapper.GetContents)

}

type ErrorMsgJSONResponse struct {
	Error string `json:"error"`
}

type GetContentJSONResponse Content

type GetContentsJSONResponse Contents

type GetContentRequestObject struct {
	ContentId ContentId `json:"contentId"`
}

type GetContentResponseObject interface {
	VisitGetContentResponse(w http.ResponseWriter) error
}

type GetContent200JSONResponse struct{ GetContentJSONResponse }

func (response GetContent200JSONResponse) VisitGetContentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetContent404JSONResponse struct{ ErrorMsgJSONResponse }

func (response GetContent404JSONResponse) VisitGetContentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetContent500JSONResponse struct {
	Error string `json:"error"`
}

func (response GetContent500JSONResponse) VisitGetContentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetContentsRequestObject struct {
}

type GetContentsResponseObject interface {
	VisitGetContentsResponse(w http.ResponseWriter) error
}

type GetContents200JSONResponse struct{ GetContentsJSONResponse }

func (response GetContents200JSONResponse) VisitGetContentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetContents500JSONResponse struct{ ErrorMsgJSONResponse }

func (response GetContents500JSONResponse) VisitGetContentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /admin/content/{contentId})
	GetContent(ctx context.Context, request GetContentRequestObject) (GetContentResponseObject, error)

	// (GET /admin/contents)
	GetContents(ctx context.Context, request GetContentsRequestObject) (GetContentsResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetContent operation middleware
func (sh *strictHandler) GetContent(ctx echo.Context, contentId ContentId) error {
	var request GetContentRequestObject

	request.ContentId = contentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetContent(ctx.Request().Context(), request.(GetContentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetContent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetContentResponseObject); ok {
		return validResponse.VisitGetContentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetContents operation middleware
func (sh *strictHandler) GetContents(ctx echo.Context) error {
	var request GetContentsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetContents(ctx.Request().Context(), request.(GetContentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetContents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetContentsResponseObject); ok {
		return validResponse.VisitGetContentsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
