// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	stdsql "database/sql"

	"entgo.io/ent/dialect/sql"
)

type ClientTx interface {
	BeginTx(context.Context, *sql.TxOptions) (*Tx, error)
	Rollback() error
	Commit() error
	QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	ExecContext(context.Context, string, ...any) (stdsql.Result, error)

	ArticleClient() *ArticleClient
	UserClient() *UserClient
}

var _ ClientTx = &Client{}

func (c *Client) Rollback() error { return nil }
func (c *Client) Commit() error   { return nil }

func (c *Client) ArticleClient() *ArticleClient {
	return c.Article
}
func (c *Client) UserClient() *UserClient {
	return c.User
}

var _ ClientTx = &Tx{}

func (tx *Tx) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	return tx, nil
}
func (tx *Tx) ArticleClient() *ArticleClient {
	return tx.Article
}
func (tx *Tx) UserClient() *UserClient {
	return tx.User
}
