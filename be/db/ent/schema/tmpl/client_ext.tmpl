{{ define "client_ext" }}

{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

import (
  "context"
  stdsql "database/sql"

  "entgo.io/ent/dialect/sql"
)

type ClientTx interface {
   BeginTx(context.Context, *sql.TxOptions) (*Tx, error)
   Rollback() error
   Commit() error
   QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
   ExecContext(context.Context, string, ...any) (stdsql.Result, error)

{{ range $n := $.Nodes -}}
  {{ $n.Name }}Client() *{{ $n.Name }}Client
{{ end }}
}

var _ ClientTx = &Client{}

func (c *Client) Rollback() error { return nil }
func (c *Client) Commit() error { return nil }

{{ range $n := $.Nodes -}}
  func (c *Client) {{ $n.Name }}Client() *{{ $n.Name }}Client {
    return c.{{ $n.Name }}
  }
{{ end }}

var _ ClientTx = &Tx{}

func (tx *Tx) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
  return tx, nil
}
{{ range $n := $.Nodes -}}
  func (tx *Tx){{ $n.Name }}Client() *{{ $n.Name }}Client {
    return tx.{{ $n.Name }}
  }
{{ end }}

{{ end }}
