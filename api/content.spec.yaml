openapi: 3.0.0
info:
  title: API
  version: 0.0.1
servers:
  - url: '{env}/api/v1'
    variables:
      env:
        default: http://localhost:8080
        enum:
          - http://localhost:8080
paths:
  /admin/articles:
    get:
      operationId: getArticles
      responses:
        '200': {$ref: '#/components/responses/GetArticles'}
        '500': {$ref: '#/components/responses/ErrorMsg'}
    post:
      operationId: createArticle
      requestBody: {$ref: '#/components/requestBodies/PostArticle'}
      responses:
        '200': {description: Article created}
        '400': {$ref: '#/components/responses/ErrorMsg'}
        '500': {$ref: '#/components/responses/ErrorMsg'}
    delete:
      operationId: deleteArticles
      parameters:
        - $ref: '#/components/parameters/articleIds'
      responses:
        '200': {description: All article deleted}
        '500': {$ref: '#/components/responses/ErrorMsg'}
  /admin/article/{articleId}:
    patch:
      operationId: updateArticle
      parameters:
        - $ref: '#/components/parameters/articleId'
      requestBody: {$ref: '#/components/requestBodies/PatchArticle'}
      responses:
        '200': {description: Article updated}
        '400':
          $ref: '#/components/responses/ErrorMsg'
        '404':
          $ref: '#/components/responses/ErrorMsg'
        '500': {$ref: '#/components/responses/ErrorMsg'}
  /admin/article/{articleId}/publish:
    post:
      operationId: publishArticle
      parameters:
        - $ref: '#/components/parameters/articleId'
      responses:
        '200': {description: Article published}
        '500': {$ref: '#/components/responses/ErrorMsg'}
components:
  parameters:
    userIds:
      name: userIds
      in: query
      required: true
      schema:
        type: array
        items:
          type: string
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
    articleId:
      name: articleId
      in: path
      required: true
      schema:
        type: integer
        format: int64
        x-go-type: int
    articleIds:
      name: articleIds
      in: query
      required: true
      schema:
        type: array
        items:
          type: integer
          format: int64
          x-go-type: int
  requestBodies:
    PostArticle:
      required: true
      content:
        application/json:
          schema: {$ref: '#/components/schemas/PostArticle'}
    PatchArticle:
      required: true
      content:
        application/json:
          schema: {$ref: '#/components/schemas/PatchArticle'}
  responses:
    ErrorMsg:
      description: Error message
      content:
        application/json:
          schema: {$ref: '#/components/schemas/ErrorMsg'}
    GetArticles:
      description: List of articles
      content:
        application/json:
          schema:
            type: object
            properties:
              data: {$ref: '#/components/schemas/Articles'}
            required: [data]
  schemas:
    ErrorMsg:
      type: object
      properties:
        error: {type: string}
      required: [error]
    Article:
      type: object
      properties:
        id: {type: number, format: int64, x-go-type: int}
        title: {type: string}
        body: {type: string}
        description: {type: string}
        tags: {type: array, items: {type: string}}
        released: {type: boolean}
      required: [id, title, body, tags, description, released]
    Articles:
      type: array
      items: {$ref: '#/components/schemas/Article'}
    PostArticle:
      type: object
      properties:
        title: {type: string}
        body: {type: string}
        description: {type: string}
        tags: {type: array, items: {type: string}}
        released: {type: boolean}
      required: [title, body, tags, description, released]
    PatchArticle:
      type: object
      properties:
        title: {type: string}
        body: {type: string}
        description: {type: string}
        tags: {type: array, items: {type: string}}
        released: {type: boolean}
      required: [title, body, tags, description, released]
  securitySchemes: {}
security: []
