openapi: 3.0.0
info:
  title: API
  version: 0.0.1
servers:
  - url: '{env}/api/v1'
    variables:
      env:
        default: http://localhost:8080
        enum:
          - http://localhost:8080
paths:
  /admin/users:
    get:
      operationId: getUsers
      responses:
        '200':
          $ref: '#/components/responses/GetUsers'
        '500':
          $ref: '#/components/responses/ErrorMsg'
    post:
      summary: Create a new user
      requestBody:
        $ref: '#/components/requestBodies/PostUsers'
      responses:
        '200':
          description: User created
        '400':
          $ref: '#/components/responses/ErrorMsg'
        '500':
          $ref: '#/components/responses/ErrorMsg'
    delete:
      operationId: deleteUsers
      parameters:
        - $ref: '#/components/parameters/userIds'
      responses:
        '200':
          description: All users deleted
        '500':
          $ref: '#/components/responses/ErrorMsg'
  /admin/users/{userId}:
    parameters:
      - $ref: '#/components/parameters/userId'
    patch:
      operationId: updateUser
      requestBody:
        $ref: '#/components/requestBodies/PatchUser'
      responses:
        '200':
          description: User updated
        '400':
          $ref: '#/components/responses/ErrorMsg'
        '500':
          $ref: '#/components/responses/ErrorMsg'
  /admin/login:
    post:
      summary: Login
      requestBody:
        $ref: '#/components/requestBodies/PostLogin'
      responses:
        '200':
          $ref: '#/components/responses/AuthToken'
        '400':
          $ref: '#/components/responses/ErrorMsg'
        '500':
          $ref: '#/components/responses/ErrorMsg'
  /admin/articles:
    get:
      operationId: getArticles
      responses:
        '200':
          $ref: '#/components/responses/GetArticles'
        '500':
          $ref: '#/components/responses/ErrorMsg'
    post:
      operationId: createArticle
      requestBody:
        $ref: '#/components/requestBodies/PostArticle'
      responses:
        '200':
          description: Article created
        '400':
          $ref: '#/components/responses/ErrorMsg'
        '500':
          $ref: '#/components/responses/ErrorMsg'
    delete:
      operationId: deleteArticles
      parameters:
        - $ref: '#/components/parameters/articleIds'
      responses:
        '200':
          description: All article deleted
        '500':
          $ref: '#/components/responses/ErrorMsg'
  /admin/article/{articleId}:
    patch:
      operationId: updateArticle
      parameters:
        - $ref: '#/components/parameters/articleId'
      requestBody:
        $ref: '#/components/requestBodies/PatchArticle'
      responses:
        '200':
          description: Article updated
        '400':
          $ref: '#/components/responses/ErrorMsg'
        '404':
          $ref: '#/components/responses/ErrorMsg'
        '500':
          $ref: '#/components/responses/ErrorMsg'
  /admin/contents:
    get:
      operationId: getContents
      responses:
        '200':
          $ref: '#/components/responses/GetContents'
        '500':
          $ref: '#/components/responses/ErrorMsg'
  /admin/content/{contentId}:
    get:
      operationId: getContent
      parameters:
        - $ref: '#/components/parameters/contentId'
      responses:
        '200':
          $ref: '#/components/responses/GetContent'
        '404':
          $ref: '#/components/responses/ErrorMsg'
        '500':
          $ref: '#/components/responses/ErrorMsg'
components:
  parameters:
    userIds:
      name: userIds
      in: query
      required: true
      schema:
        type: array
        items:
          type: string
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
    articleId:
      name: articleId
      in: path
      required: true
      schema:
        type: integer
        format: int64
        x-go-type: int
    articleIds:
      name: articleIds
      in: query
      required: true
      schema:
        type: array
        items:
          type: integer
          format: int64
          x-go-type: int
    contentId:
      name: contentId
      in: path
      required: true
      schema:
        type: string
  requestBodies:
    PostUsers:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostUsers'
    PatchUser:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PatchUser'
    PostLogin:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostLogin'
    PostArticle:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostArticle'
    PatchArticle:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PatchArticle'
  responses:
    ErrorMsg:
      description: Error message
      content:
        application/json:
          schema: {$ref: '#/components/schemas/ErrorMsg', type: object, properties: {error: {type: string}}, required: [error]}
    GetUsers:
      description: List of users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Users'
    AuthToken:
      description: Login response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthToken'
    GetArticles:
      description: List of articles
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Articles'
    GetContents:
      description: List of contents
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Contents'
    GetContent:
      description: Content
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Content'
  schemas:
    ErrorMsg:
      type: object
      properties:
        error: {type: string}
      required: [error]
    User:
      type: object
      properties:
        id:
          type: number
          format: int64
          x-go-type: int
        nick:
          type: string
        email:
          type: string
        userType:
          type: string
      required: [id, name, email, userType]
    UserType:
      type: string
      enum:
        - ADMIN
        - CONTENT_CREATOR
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    PostUsers:
      type: object
      properties:
        nick:
          type: string
        email:
          type: string
        userType:
          $ref: '#/components/schemas/UserType'
      required: [nick, email, userType]
    PatchUser:
      type: object
      properties:
        nick:
          type: string
        email:
          type: string
        userType:
          $ref: '#/components/schemas/UserType'
      required: [nick, email, userType]
    PostLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required: [email, password]
    AuthToken:
      type: object
      properties:
        token:
          type: string
        expiresAt:
          type: string
          format: date-time
      required: [token, expiresAt]
    Article:
      type: object
      properties:
        id:
          type: number
          format: int64
          x-go-type: int
        title:
          type: string
        body:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        released:
          type: boolean
      required: [id, title, body, tags, description, released]
    Articles:
      type: array
      items:
        $ref: '#/components/schemas/Article'
    PostArticle:
      type: object
      properties:
        title:
          type: string
        body:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        released:
          type: boolean
      required: [title, body, tags, description, released]
    PatchArticle:
      type: object
      properties:
        title:
          type: string
        body:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        released:
          type: boolean
      required: [title, body, tags, description, released]
    Content:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        body:
          type: string
        tags:
          type: array
          items:
            type: string
      required: [id, title, body, tags]
    Contents:
      type: array
      items:
        $ref: '#/components/schemas/Content'
  securitySchemes: {}
security: []
